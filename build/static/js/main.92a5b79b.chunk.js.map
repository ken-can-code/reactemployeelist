{"version":3,"sources":["Table.jsx","Form.jsx","App.jsx","index.jsx"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"wNAEMA,EAAc,kBAClB,gCACE,+BACE,sCACA,2CAKAC,EAAY,SAACC,GACjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,+BACE,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACE,wBAAQC,QAAS,kBAAMR,EAAMS,gBAAgBJ,IAA7C,wBAJKA,MAUb,OAAO,gCAAQJ,KAcFS,EAXD,SAACV,GACb,IAAQE,EAAmCF,EAAnCE,cAAeO,EAAoBT,EAApBS,gBAEvB,OACE,kCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWP,cAAeA,EAAeO,gBAAiBA,Q,OC/B1DE,E,4MACJC,aAAe,CACbN,KAAM,GACNC,IAAK,I,EAGPM,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GACd,MAAwBA,EAAMC,OAAtBV,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACGZ,EAAOW,K,EAIZE,WAAa,WACX,EAAKnB,MAAMoB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,4CAGrB,WACE,MAAsBS,KAAKR,MAAnBP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAEd,OACE,iCACE,uBAAOe,QAAQ,OAAf,kBACA,uBACEC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eAEjB,uBAAOQ,QAAQ,MAAf,iBACA,uBACEC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eAEjB,uBAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,oB,GA1CvCO,aAgDJf,IC9CTgB,E,4MACJd,MAAQ,CACNe,WAAY,I,EAGdnB,gBAAkB,SAACJ,GACjB,IAAQuB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CACZU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM1B,Q,EAKnBe,aAAe,SAACU,GACd,EAAKZ,SAAS,CAACU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,4CAGxD,WACE,IAAQF,EAAeP,KAAKR,MAApBe,WAER,OACE,sBAAKI,UAAU,YAAf,UACA,+CACA,oFACE,cAAC,EAAD,CAAO9B,cAAe0B,EAAYnB,gBAAiBY,KAAKZ,kBACxD,yCACA,cAAC,EAAD,CAAMW,aAAcC,KAAKD,sB,GA5BfM,aAkCHC,I,MCjCfM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.92a5b79b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst TableHeader = () => (\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Job</th>\n    </tr>\n  </thead>\n)\n\nconst TableBody = (props) => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    )\n  })\n\n  return <tbody>{rows}</tbody>\n}\n\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props;\n\n  return (\n    <table>\n      <TableHeader />\n      <TableBody characterData={characterData} removeCharacter={removeCharacter} />\n    </table>\n  )\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n  initialState = {\n    name: '',\n    job: '',\n  };\n    \n  state = this.initialState;\n\n  handleChange = (event) => {\n    const { name, value } = event.target\n  \n    this.setState({\n      [name]: value,\n    })\n  }\n\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { name, job } = this.state;\n\n    return (\n      <form>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        />\n        <input type='button' value='Submit' onClick={this.submitForm} />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, {Component} from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n    characters: [],\n  }\n\n  removeCharacter = (index) => {\n    const { characters } = this.state;\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      }),\n    })\n  }\n\n  handleSubmit = (character) => {\n    this.setState({characters: [...this.state.characters, character]});\n  } // Line 21: You're going to pass in the entire state, not just whatever changes.\n\n  render() {\n    const { characters } = this.state;\n\n    return (\n      <div className=\"container\">\n      <h2>Employee List</h2>\n      <p>Add a character with a name and a job to the table.</p>\n        <Table characterData={characters} removeCharacter={this.removeCharacter} />\n        <h3>Add New</h3>\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}